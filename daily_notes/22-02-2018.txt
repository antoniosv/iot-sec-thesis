OSGi is a set of specifications that defines a component and service model for Java. The idea comes from the modularity of software: it can be broken up in many small parts as components or bundles. These bundles may interact with each other through some predefined methods, i.e., an API. Thus, OSGi defines how a these components may be able to talk to each other, and for this, each bundles dedices which packages it may offer (exported packages), and may also require funcionalities from other bundles (eefined as imported packages), which are known as dependencies. The main advantage of using this type of architecture is that the components and services can be dynamically installed, activated, de-activated, updated and uninstalled. In very practical terms, a bundle or plug-in is packaged as a jar file with some meta information. This meta information is stored in the META-INF/MANIFEST.MF file.

Some of the fields in the MANIFEST.MF file are:
- Bundle-Name: description of the bundle.
- Bundle-SymbolicName: unique identifier of the bundle. Usually starts with domain name (e.g. com.example")
- Bundle-Version: Must be incremented as a new version is published.
- Bundle-Activator: It has start() and stop() methods that are called whenever the bundle is started or stopped.

Dependencies can be found in the manifest file, and if not listed there, OSGi prevents access to those classes. After adding a dependency, the bundle can access all the exported packages of this added dependency. Before the OSGi runtime starts a bundle, it checks first that all its dependencies are present. 

Eclipse Equinox is the reference implementation of the OSGi framework, i.e. a set of bundles that implement OSGi services and other infrastructure for running OSGi-based systems. Eclipse applications are built on Equinox. 

On the modularity of OSGi: http://www.vogella.com/tutorials/OSGi/article.html

Creating OSGi bundles and services in Eclipse:
http://www.vogella.com/tutorials/OSGi/article.html

Example of how to integrate Eclipse (Equinox + Maven) with karaf:
http://www.joern-karthaus.de/blog/karaf.html
