On 15-02-2018 there was a meeting in Google Hangouts with the ESH and openHAB group. The intention was to clarify the requirements to add authentication and authorization to the ESH core. The discussion trailed off in some parts, but the general agreements were:
- Authentication will be the main focus. Authorization comes later.
- To keep sessions, JWT will be used. (this requires server to have key pair)
- Authentication can be local or external, external authentication may use services like Google or Facebook. Evidently, ESH needs to keep track of the users.
- ESH will offer interfaces so that actual authorization implementations can be plugged in.
- ESH will offer an out-of-the-box authentication model, with credentials like username and password. 
- Authorization will be role based, but details are left pending.
- The most relevant parts to "restrict in access" are the servlets which communicate through HTTP.

16-02-2018
The intention is to explore more on the core concepts of ESH as a first step towards understanding its architecture. It's not realistic to propose improvements or additions without understanding the architecture.

An IoT application typically has Things in the real world and an application, and the connection between both aspects is called "items". Items represent the functionality that is used by the application: they have a state and may be used through events. An item can be of many types, such as: Number, Switch, String, etc. For example, a temperature Item would be of type Number, e.g.: -10.

Things are the physical entities that can be added to the system. They can provide many functionalities. These Things may also represent a web service which is a source of information and functionality. It may have configuration properties like IP address, access token for a web service, etc.

A Thing provides "channels", which is the representation of the functions that offered by it. Thus, Thing is the physical entity or source of information, and channel is a *function* provided by it. Example: light bulb is a Thing which has a dimmer channel and a color channel. Both channels provide functionality of a single light bulb. For a source of information, a local weather channel may have different channels like temperature, pressure, and humidity.

There is a link between channels and items, and this is the link between the virtual and physical layer. With the established link, a Thing may react on events for items linked to its channels.  

ESH follows the approach of a central gateway, meaning that the code for managing the IoT application is centralized in the ESH server.
Bindings implement a Thing-specific protocol and are connected via an event bus to enable inter-component communication. E.g., a Z-Wave binding implements the Z-Wave communication protocol that can be used to communicate with devices that support it. So, the communication is happening ESH<->Thing after all, and not ESH<->Backend<->Thing. Consider the scenario where you have a light bulb, and to turn it off, you communicate with it through some binding. Evidently, there is no need for connection to the cloud to get access to this device, it is all done through the binding.

Thhere are two mediums in ESH for user interfaces to communicate with the main framework: via a REST API and via user interfaces deployed in the OSGi container.  Remote user interfaces executed on a client uses the REST API typically.

Is the traffic from the REST API encrypted? Can it be authenticated?

Features of ESH. ESH is built with bundles or modules in the form of OSGi for Java applications. The bundles present in ESH are:
  - config
  - core
  - io
  - model
  - designer
  - ui

The relevant bundle to consider for the security analysis of the communication between ESH and Things and users is the io bundle. io has all kinds of optional functionality that has to do with I/O-like console commands, audio support or HTTP/REST communication.
From the hangouts call, there was a mention that there existed servlets that communicated with HTTP. It's worth looking at these.

According to the docs ( https://www.eclipse.org/smarthome/documentation/features/index.html ), user interfaces normally use the REST API for communication, but if they are not client-side, but served from runtime, they also have the option to use all local Java services.

